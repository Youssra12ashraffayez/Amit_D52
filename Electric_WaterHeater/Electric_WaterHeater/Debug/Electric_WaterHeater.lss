
Electric_WaterHeater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000eca  00000f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080007a  0080007a  00000f78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000239d  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3a  00000000  00000000  000036d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001412  00000000  00000000  0000460b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000800  00000000  00000000  00005a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6e  00000000  00000000  00006220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e87  00000000  00000000  00006e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00007d15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_1>
   8:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__vector_2>
   c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <main>
  8a:	0c 94 63 07 	jmp	0xec6	; 0xec6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Temperature_Setting_Up>:
	}
}

void Temperature_Setting_Up()
{
	if (counter_up != 0 && System_Mode == SYSTEM_ON)
  92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <counter_up>
  96:	88 23       	and	r24, r24
  98:	b9 f0       	breq	.+46     	; 0xc8 <Temperature_Setting_Up+0x36>
  9a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <System_Mode>
  9e:	91 30       	cpi	r25, 0x01	; 1
  a0:	99 f4       	brne	.+38     	; 0xc8 <Temperature_Setting_Up+0x36>
	{
		counter_5sec = 0;
  a2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <counter_5sec>
		Temp_Set = (Temp_Set + 5 <= 75) ? Temp_Set + 5 : 75;
  a6:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <Temp_Set>
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	6b 5f       	subi	r22, 0xFB	; 251
  ae:	7f 4f       	sbci	r23, 0xFF	; 255
  b0:	6c 34       	cpi	r22, 0x4C	; 76
  b2:	71 05       	cpc	r23, r1
  b4:	14 f0       	brlt	.+4      	; 0xba <Temperature_Setting_Up+0x28>
  b6:	6b e4       	ldi	r22, 0x4B	; 75
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <Temp_Set>
		EEPROM_Send(0, Temp_Set);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 cb 03 	call	0x796	; 0x796 <EEPROM_Send>
  c6:	08 95       	ret
	}
	else
	{
		counter_up++;
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <counter_up>
		counter_5sec = 0;
  ce:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <counter_5sec>
  d2:	08 95       	ret

000000d4 <Temperature_Setting_Down>:
	}
}

void Temperature_Setting_Down()
{
	if (counter_down != 0 && System_Mode == SYSTEM_ON)
  d4:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <counter_down>
  d8:	88 23       	and	r24, r24
  da:	b9 f0       	breq	.+46     	; 0x10a <Temperature_Setting_Down+0x36>
  dc:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <System_Mode>
  e0:	91 30       	cpi	r25, 0x01	; 1
  e2:	99 f4       	brne	.+38     	; 0x10a <Temperature_Setting_Down+0x36>
	{
		counter_5sec = 0;
  e4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <counter_5sec>
		Temp_Set = (Temp_Set - 5 >= 35) ? Temp_Set - 5 : 35;
  e8:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <Temp_Set>
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	65 50       	subi	r22, 0x05	; 5
  f0:	71 09       	sbc	r23, r1
  f2:	63 32       	cpi	r22, 0x23	; 35
  f4:	71 05       	cpc	r23, r1
  f6:	14 f4       	brge	.+4      	; 0xfc <Temperature_Setting_Down+0x28>
  f8:	63 e2       	ldi	r22, 0x23	; 35
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <Temp_Set>
		EEPROM_Send(0, Temp_Set);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 cb 03 	call	0x796	; 0x796 <EEPROM_Send>
 108:	08 95       	ret
	}
	else
	{
		counter_down++;
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <counter_down>
		counter_5sec = 0;
 110:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <counter_5sec>
 114:	08 95       	ret

00000116 <ADC_Reading_Timer>:
}

void ADC_Reading_Timer()
{
	static u16 counter1 = 0;
	counter1++;
 116:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <counter1.1743>
 11a:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <counter1.1743+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <counter1.1743+0x1>
 124:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <counter1.1743>
	// Check if the timer has reached the overflow count (100 ms)
	if (counter1 == OF_Count) // 100 ms
 128:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <OF_Count>
 12c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <OF_Count+0x1>
 130:	82 17       	cp	r24, r18
 132:	93 07       	cpc	r25, r19
 134:	39 f4       	brne	.+14     	; 0x144 <ADC_Reading_Timer+0x2e>
	{
		counter1 = 0;
 136:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <counter1.1743+0x1>
 13a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <counter1.1743>
		ADC_Vid_Start_Conversion(ADC0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <ADC_Vid_Start_Conversion>
 144:	08 95       	ret

00000146 <ON_OFF_Behaviour>:


void ON_OFF_Behaviour()
{
 // Check if the system is currently OFF
	if (System_Mode == SYSTEM_OFF)
 146:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <System_Mode>
 14a:	81 11       	cpse	r24, r1
 14c:	0a c0       	rjmp	.+20     	; 0x162 <ON_OFF_Behaviour+0x1c>
	{
// Retrieve last saved temperature setting from EEPROM
		Temp_Set = EEPROM_Recieve(0);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <EEPROM_Recieve>
 156:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Temp_Set>
		// Set system state to ON
		System_Mode = SYSTEM_ON;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <System_Mode>
 160:	08 95       	ret
	}
	else
	{
	// Turn off display and all heating/cooling elements
		SSD_DIS();
 162:	0e 94 24 02 	call	0x448	; 0x448 <SSD_DIS>
		Heating_ElementLed_OFF();
 166:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Heating_ElementLed_OFF>
		CoolingElement_OFF();
 16a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <CoolingElement_OFF>
		HeatingElement_OFF();
 16e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <HeatingElement_OFF>
		// Save current temperature setting to EEPROM
		EEPROM_Send(0, Temp_Set);
 172:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <Temp_Set>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 cb 03 	call	0x796	; 0x796 <EEPROM_Send>
		// Set system state to OFF
		System_Mode = SYSTEM_OFF;
 17e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <System_Mode>
 182:	08 95       	ret

00000184 <TemperatureMonitoringTask>:
}

void TemperatureMonitoringTask()
{
	// Check if the system is ON and the heating element is active
	if ((System_Mode == SYSTEM_ON) && (DIO_u8_Get_Pin_Val(HEATINGELEMENT_PORT, HEATINGELEMENT_PIN) == HIGH))
 184:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <System_Mode>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	49 f4       	brne	.+18     	; 0x19e <TemperatureMonitoringTask+0x1a>
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_u8_Get_Pin_Val>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	19 f4       	brne	.+6      	; 0x19e <TemperatureMonitoringTask+0x1a>
	{
		HeatingElement_Led_TOGGLE();
 198:	0e 94 da 01 	call	0x3b4	; 0x3b4 <HeatingElement_Led_TOGGLE>
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <TemperatureMonitoringTask+0x1e>
	}
	else
	{
		Heating_ElementLed_OFF();
 19e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Heating_ElementLed_OFF>
	}
	 // Check if the system is in setting mode
	if (SettingMode_Flag == 1)
 1a2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <SettingMode_Flag>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <TemperatureMonitoringTask+0x2a>
	{
		// Toggle Seven Segment Display
		SSD_TOGGLE();
 1aa:	0e 94 30 02 	call	0x460	; 0x460 <SSD_TOGGLE>
	}
	// Check if the system is ON
	if (System_Mode == SYSTEM_ON)
 1ae:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <System_Mode>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	41 f5       	brne	.+80     	; 0x206 <TemperatureMonitoringTask+0x82>
	{
		counter_5sec++;
 1b6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <counter_5sec>
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <counter_5sec>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	80 e7       	ldi	r24, 0x70	; 112
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <TemperatureMonitoringTask+0x42>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <TemperatureMonitoringTask+0x4c>
 1d0:	00 00       	nop

		_delay_ms(50);
	// Check if 5 seconds have passed
		if (counter_5sec > 5)
 1d2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <counter_5sec>
 1d6:	86 30       	cpi	r24, 0x06	; 6
 1d8:	68 f0       	brcs	.+26     	; 0x1f4 <TemperatureMonitoringTask+0x70>
		{
			counter_up = 0;
 1da:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <counter_up>
			counter_down = 0;
 1de:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <counter_down>
			// Enable Seven Segment Display and show average temperature
			SSD_EN();
 1e2:	0e 94 2a 02 	call	0x454	; 0x454 <SSD_EN>
			SEVEN_SEGMENT_Write_Val(Temp_AVG);
 1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Temp_AVG>
 1ea:	0e 94 35 02 	call	0x46a	; 0x46a <SEVEN_SEGMENT_Write_Val>
			SettingMode_Flag = 0;
 1ee:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <SettingMode_Flag>
 1f2:	08 95       	ret
		}
		else
		{
			// Enable Seven Segment Display and show current temperature setting
			SSD_EN();
 1f4:	0e 94 2a 02 	call	0x454	; 0x454 <SSD_EN>
			SEVEN_SEGMENT_Write_Val(Temp_Set);
 1f8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Temp_Set>
 1fc:	0e 94 35 02 	call	0x46a	; 0x46a <SEVEN_SEGMENT_Write_Val>
			SettingMode_Flag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <SettingMode_Flag>
 206:	08 95       	ret

00000208 <EEPROM_Init>:
u8 counter_down = 0;

// Initializing EEPROM with temperature = 60 if no temperature is stored yet
void EEPROM_Init()
{
	u8 Loc_Var = EEPROM_Recieve(0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <EEPROM_Recieve>
	// Check if EEPROM has been initialized
	if (Loc_Var == 0)
 210:	81 11       	cpse	r24, r1
 212:	06 c0       	rjmp	.+12     	; 0x220 <EEPROM_Init+0x18>
	{
		// If not initialized, set default temperature and store it in EEPROM
		EEPROM_Send(0, Temp_Set);
 214:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <Temp_Set>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 cb 03 	call	0x796	; 0x796 <EEPROM_Send>
 220:	08 95       	ret

00000222 <System_Init>:

void System_Init()
{

	/*Global Interrupt */
	GIE_Vid_Enable();
 222:	0e 94 c4 04 	call	0x988	; 0x988 <GIE_Vid_Enable>

	/* External Interrupt 0 for increasing temperature setting */
	EXT_Vid_Interrupt_Init0(RISING_EDGE);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 e6 03 	call	0x7cc	; 0x7cc <EXT_Vid_Interrupt_Init0>
	EXT_Vid_Interrupt0();
 22c:	0e 94 28 04 	call	0x850	; 0x850 <EXT_Vid_Interrupt0>
	EXT_Vid_Set_CallBack(Temperature_Setting_Up);
 230:	89 e4       	ldi	r24, 0x49	; 73
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 3a 04 	call	0x874	; 0x874 <EXT_Vid_Set_CallBack>

	 /* External Interrupt 1 for decreasing temperature setting */
	EXT_Vid_Interrupt_Init1(RISING_EDGE);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 01 04 	call	0x802	; 0x802 <EXT_Vid_Interrupt_Init1>
	EXT_Vid_Interrupt1();
 23e:	0e 94 2e 04 	call	0x85c	; 0x85c <EXT_Vid_Interrupt1>
	EXT_Vid_Set_CallBack_2(Temperature_Setting_Down);
 242:	8a e6       	ldi	r24, 0x6A	; 106
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 3f 04 	call	0x87e	; 0x87e <EXT_Vid_Set_CallBack_2>

	/*External Interrupt 2 for Switching ON/OFF System */
	EXT_Vid_Interrupt_Init2(RISING_EDGE);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 1c 04 	call	0x838	; 0x838 <EXT_Vid_Interrupt_Init2>
	EXT_Vid_Interrupt2();
 250:	0e 94 34 04 	call	0x868	; 0x868 <EXT_Vid_Interrupt2>
	EXT_Vid_Set_CallBack_3(ON_OFF_Behaviour);
 254:	83 ea       	ldi	r24, 0xA3	; 163
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 44 04 	call	0x888	; 0x888 <EXT_Vid_Set_CallBack_3>

	/* Set pin directions for buttons */
	DIO_Vid_Set_Pin_Dir(UP_BUTTON_PORT, UP_BUTTON_PIN, INPUT);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(DOWN_BUTTON_PORT, DOWN_BUTTON_PIN, INPUT);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(ON_OFF_PORT, ON_OFF_PIN, INPUT);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	// Initialize heating and cooling elements
	Heater_Cooler_Init();
 27a:	0e 94 c4 01 	call	0x388	; 0x388 <Heater_Cooler_Init>

	/*Seven Segment Initialization */
	SSD_Vid_Init();
 27e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SSD_Vid_Init>

	/* ADC Initialization */
	ADC_Vid_Init();
 282:	0e 94 d6 02 	call	0x5ac	; 0x5ac <ADC_Vid_Init>
    /* ADC Interrupt Enable */
	ADC_Vid_Interrupt_Enable();
 286:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <ADC_Vid_Interrupt_Enable>
	ADC_Set_Call_Back(Temperature_Sensing);
 28a:	8e e7       	ldi	r24, 0x7E	; 126
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Set_Call_Back>

	/* Timer0 Normal */
	TIMER0_Vid_Interrupt_Enable_Every(100); // 100 ms
 292:	84 e6       	ldi	r24, 0x64	; 100
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_Vid_Interrupt_Enable_Every>
	TIMER0_Vid_Set_CallBack(ADC_Reading_Timer);
 29a:	8b e8       	ldi	r24, 0x8B	; 139
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 13 05 	call	0xa26	; 0xa26 <TIMER0_Vid_Set_CallBack>

	/*Timer 1 CTC*/
	TIMER1_Vid_CTC_Init();
 2a2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <TIMER1_Vid_CTC_Init>
	TIMER1_Vid_CTC_InterruptEnable();
 2a6:	0e 94 61 05 	call	0xac2	; 0xac2 <TIMER1_Vid_CTC_InterruptEnable>
	Timer1_CTC_SetCallBack(TemperatureMonitoringTask);
 2aa:	82 ec       	ldi	r24, 0xC2	; 194
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 65 05 	call	0xaca	; 0xaca <Timer1_CTC_SetCallBack>
 2b2:	08 95       	ret

000002b4 <Heater_Cooler_Control>:
}

void Heater_Cooler_Control()
{
	// Required Temperature is equal to room temperature, so no action needed
	if( ( Temp_Set<Temp_AVG+TEMP_MARGIN ) && (Temp_Set>Temp_AVG-TEMP_MARGIN)  )
 2b4:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <Temp_Set>
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Temp_AVG>
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	4b 5f       	subi	r20, 0xFB	; 251
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	24 17       	cp	r18, r20
 2c8:	35 07       	cpc	r19, r21
 2ca:	9c f4       	brge	.+38     	; 0x2f2 <Heater_Cooler_Control+0x3e>
 2cc:	05 97       	sbiw	r24, 0x05	; 5
 2ce:	82 17       	cp	r24, r18
 2d0:	93 07       	cpc	r25, r19
 2d2:	54 f4       	brge	.+20     	; 0x2e8 <Heater_Cooler_Control+0x34>
	{
		// Turn off Cooler and Turn Heater off
		HeatingElement_OFF();
 2d4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <HeatingElement_OFF>
		CoolingElement_OFF();
 2d8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <CoolingElement_OFF>
 2dc:	08 95       	ret
	}
	// Required Temperature is higher than room temperature, so heat the room
	else if(Temp_Set >Temp_AVG - TEMP_MARGIN )
	{
		// Turn on Heater and turn Cooler off
		HeatingElement_ON();
 2de:	0e 94 df 01 	call	0x3be	; 0x3be <HeatingElement_ON>
		CoolingElement_OFF();
 2e2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <CoolingElement_OFF>
 2e6:	08 95       	ret
	}
// Required Temperature is lower than room temperature, so cool the room
	else if (Temp_Set < Temp_AVG + TEMP_MARGIN)
	{
		// Turn on Cooler and Turn Heater off
		HeatingElement_OFF();
 2e8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <HeatingElement_OFF>
		CoolingElement_ON();
 2ec:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <CoolingElement_ON>
 2f0:	08 95       	ret
		HeatingElement_OFF();
		CoolingElement_OFF();
		
	}
	// Required Temperature is higher than room temperature, so heat the room
	else if(Temp_Set >Temp_AVG - TEMP_MARGIN )
 2f2:	05 97       	sbiw	r24, 0x05	; 5
 2f4:	82 17       	cp	r24, r18
 2f6:	93 07       	cpc	r25, r19
 2f8:	94 f3       	brlt	.-28     	; 0x2de <Heater_Cooler_Control+0x2a>
 2fa:	08 95       	ret

000002fc <Temperature_Sensing>:

void Temperature_Sensing()
{
	static u8 counter2 = 0;
	static u16 Temp_Sum = 0;
	if (System_Mode == SYSTEM_ON)
 2fc:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <System_Mode>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <Temperature_Sensing+0xa>
 304:	40 c0       	rjmp	.+128    	; 0x386 <Temperature_Sensing+0x8a>
	{
		counter2++;
 306:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <counter2.1752>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <counter2.1752>
		 // Read current temperature from ADC
		Temp_Curr = ADC_u16_Read() * (float)500 / 1024;
 310:	0e 94 de 02 	call	0x5bc	; 0x5bc <ADC_u16_Read>
 314:	bc 01       	movw	r22, r24
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	4a ef       	ldi	r20, 0xFA	; 250
 324:	53 e4       	ldi	r21, 0x43	; 67
 326:	0e 94 e7 06 	call	0xdce	; 0xdce <__mulsf3>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e8       	ldi	r20, 0x80	; 128
 330:	5a e3       	ldi	r21, 0x3A	; 58
 332:	0e 94 e7 06 	call	0xdce	; 0xdce <__mulsf3>
 336:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fixunssfsi>
 33a:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <Temp_Curr+0x1>
 33e:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <Temp_Curr>
		Temp_Sum += Temp_Curr;
 342:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__data_end>
 346:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <__data_end+0x1>
 34a:	26 0f       	add	r18, r22
 34c:	37 1f       	adc	r19, r23
 34e:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <__data_end+0x1>
 352:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__data_end>
	// Average temperature over 10 readings
		if (counter2 == 10)
 356:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <counter2.1752>
 35a:	8a 30       	cpi	r24, 0x0A	; 10
 35c:	a1 f4       	brne	.+40     	; 0x386 <Temperature_Sensing+0x8a>
		{
			counter2 = 0;
 35e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <counter2.1752>
			Temp_AVG = Temp_Sum / 10;
 362:	ad ec       	ldi	r26, 0xCD	; 205
 364:	bc ec       	ldi	r27, 0xCC	; 204
 366:	0e 94 54 07 	call	0xea8	; 0xea8 <__umulhisi3>
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Temp_AVG>
			Temp_Sum = 0;
 37a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x1>
 37e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
			// Control heating/cooling elements based on temperature
			Heater_Cooler_Control();
 382:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Heater_Cooler_Control>
 386:	08 95       	ret

00000388 <Heater_Cooler_Init>:
	DIO_Vid_Set_Pin_Dir(COOLINGELEMENT_PORT, COOLINGELEMENT_PIN, OUTPUT);
}
// Turn on the heating element LED
void Heating_ElementLed_ON()
{
	DIO_Vid_Set_Pin_Val(HEATINGELEMENTLED_PORT, HEATINGELEMENTLED_PIN, HIGH);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	64 e0       	ldi	r22, 0x04	; 4
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
 3a6:	08 95       	ret

000003a8 <Heating_ElementLed_OFF>:
}
// Turn off the heating element LED
void Heating_ElementLed_OFF()
{
	DIO_Vid_Set_Pin_Val(HEATINGELEMENTLED_PORT, HEATINGELEMENTLED_PIN, LOW);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 3b2:	08 95       	ret

000003b4 <HeatingElement_Led_TOGGLE>:
}
// Toggle the state of the heating element LED
void HeatingElement_Led_TOGGLE()
{
	DIO_Vid_Toggle_Pin_Val(HEATINGELEMENTLED_PORT, HEATINGELEMENTLED_PIN);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 93 03 	call	0x726	; 0x726 <DIO_Vid_Toggle_Pin_Val>
 3bc:	08 95       	ret

000003be <HeatingElement_ON>:
}
// Turn on the heating element
void HeatingElement_ON()
{
	DIO_Vid_Set_Pin_Val(HEATINGELEMENT_PORT, HEATINGELEMENT_PIN, HIGH);
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 3c8:	08 95       	ret

000003ca <HeatingElement_OFF>:
}
// Turn off the heating element
void HeatingElement_OFF()
{
	DIO_Vid_Set_Pin_Val(HEATINGELEMENT_PORT, HEATINGELEMENT_PIN, LOW);
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 3d4:	08 95       	ret

000003d6 <CoolingElement_ON>:
}
// Turn on the cooling element
void CoolingElement_ON()
{
	DIO_Vid_Set_Pin_Val(COOLINGELEMENT_PORT, COOLINGELEMENT_PIN, HIGH);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 3e0:	08 95       	ret

000003e2 <CoolingElement_OFF>:
}
// Turn off the cooling element
void CoolingElement_OFF()
{
	DIO_Vid_Set_Pin_Val(COOLINGELEMENT_PORT, COOLINGELEMENT_PIN, LOW);
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	64 e0       	ldi	r22, 0x04	; 4
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 3ec:	08 95       	ret

000003ee <SSD_Vid_Init>:
 * Return value : void
 *****************************************************************************/
void SSD_Vid_Init()
{
	// Set the direction of the seven-segment display pins
	DIO_Vid_Set_Port_Dir(PORTC, PORT_OUTPUT);
 3ee:	6f ef       	ldi	r22, 0xFF	; 255
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_Vid_Set_Port_Dir>
	DIO_Vid_Set_Pin_Dir(PORTA, PIN1, OUTPUT);
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(PORTA, PIN2, OUTPUT);
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(PORTA, PIN3, OUTPUT);
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	63 e0       	ldi	r22, 0x03	; 3
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(PORTB, PIN0, OUTPUT);
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(PORTB, PIN5, OUTPUT);
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	65 e0       	ldi	r22, 0x05	; 5
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(PORTB, PIN6, OUTPUT);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	66 e0       	ldi	r22, 0x06	; 6
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(PORTB, PIN7, OUTPUT);
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	67 e0       	ldi	r22, 0x07	; 7
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
	// Set the direction of the control pin for the seven-segment display
	DIO_Vid_Set_Pin_Dir(PORTC, PIN7, OUTPUT);
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	67 e0       	ldi	r22, 0x07	; 7
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 19 03 	call	0x632	; 0x632 <DIO_Vid_Set_Pin_Dir>
 446:	08 95       	ret

00000448 <SSD_DIS>:
 * Return value : void
 *****************************************************************************/
void SSD_DIS()
{
	 // Disable the seven-segment display by setting the control pin to HIGH
	DIO_Vid_Set_Pin_Val(PORTC, PIN7, HIGH);
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	67 e0       	ldi	r22, 0x07	; 7
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 452:	08 95       	ret

00000454 <SSD_EN>:
}

void SSD_EN()
{
	// Enable the seven-segment display by setting the control pin to LOW
	DIO_Vid_Set_Pin_Val(PORTC, PIN7, LOW);
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	67 e0       	ldi	r22, 0x07	; 7
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 45e:	08 95       	ret

00000460 <SSD_TOGGLE>:
}
void SSD_TOGGLE()
{
	// Toggle the state of the control pin for the seven-segment display
	DIO_Vid_Toggle_Pin_Val(PORTC, PIN7);
 460:	67 e0       	ldi	r22, 0x07	; 7
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	0e 94 93 03 	call	0x726	; 0x726 <DIO_Vid_Toggle_Pin_Val>
 468:	08 95       	ret

0000046a <SEVEN_SEGMENT_Write_Val>:
 * Purpose      : Write Value On Seven Segment
 * Parameters   : void
 * Return value : void
 *****************************************************************************/
void SEVEN_SEGMENT_Write_Val(u8 number)
{
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	2a 97       	sbiw	r28, 0x0a	; 10
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
// Array to store the segment patterns for each digit
	u8 num[10] = {0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x7, 0xFF, 0x67};
 482:	9a e0       	ldi	r25, 0x0A	; 10
 484:	e0 e7       	ldi	r30, 0x70	; 112
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	de 01       	movw	r26, r28
 48a:	11 96       	adiw	r26, 0x01	; 1
 48c:	01 90       	ld	r0, Z+
 48e:	0d 92       	st	X+, r0
 490:	9a 95       	dec	r25
 492:	e1 f7       	brne	.-8      	; 0x48c <SEVEN_SEGMENT_Write_Val+0x22>
// Extract the ones and tens digits from the number
	u8 SSD1 = num[number % 10];
 494:	9d ec       	ldi	r25, 0xCD	; 205
 496:	89 9f       	mul	r24, r25
 498:	91 2d       	mov	r25, r1
 49a:	11 24       	eor	r1, r1
 49c:	96 95       	lsr	r25
 49e:	96 95       	lsr	r25
 4a0:	96 95       	lsr	r25
 4a2:	39 2f       	mov	r19, r25
 4a4:	33 0f       	add	r19, r19
 4a6:	23 2f       	mov	r18, r19
 4a8:	22 0f       	add	r18, r18
 4aa:	22 0f       	add	r18, r18
 4ac:	23 0f       	add	r18, r19
 4ae:	82 1b       	sub	r24, r18
 4b0:	e1 e0       	ldi	r30, 0x01	; 1
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	ec 0f       	add	r30, r28
 4b6:	fd 1f       	adc	r31, r29
 4b8:	e8 0f       	add	r30, r24
 4ba:	f1 1d       	adc	r31, r1
 4bc:	00 81       	ld	r16, Z
	u8 SSD2 = num[number / 10];
 4be:	e1 e0       	ldi	r30, 0x01	; 1
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	ec 0f       	add	r30, r28
 4c4:	fd 1f       	adc	r31, r29
 4c6:	e9 0f       	add	r30, r25
 4c8:	f1 1d       	adc	r31, r1
 4ca:	10 81       	ld	r17, Z

// Set the segment pins for the ones digit
	DIO_Vid_Set_Pin_Val(PORTC, PIN0, GET_BIT(SSD1, 0));
 4cc:	40 2f       	mov	r20, r16
 4ce:	41 70       	andi	r20, 0x01	; 1
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTC, PIN1, GET_BIT(SSD1, 1));
 4d8:	01 fb       	bst	r16, 1
 4da:	44 27       	eor	r20, r20
 4dc:	40 f9       	bld	r20, 0
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTC, PIN2, GET_BIT(SSD1, 2));
 4e6:	02 fb       	bst	r16, 2
 4e8:	44 27       	eor	r20, r20
 4ea:	40 f9       	bld	r20, 0
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTC, PIN3, GET_BIT(SSD1, 3));
 4f4:	03 fb       	bst	r16, 3
 4f6:	44 27       	eor	r20, r20
 4f8:	40 f9       	bld	r20, 0
 4fa:	63 e0       	ldi	r22, 0x03	; 3
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTC, PIN4, GET_BIT(SSD1, 4));
 502:	04 fb       	bst	r16, 4
 504:	44 27       	eor	r20, r20
 506:	40 f9       	bld	r20, 0
 508:	64 e0       	ldi	r22, 0x04	; 4
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTC, PIN5, GET_BIT(SSD1, 5));
 510:	05 fb       	bst	r16, 5
 512:	44 27       	eor	r20, r20
 514:	40 f9       	bld	r20, 0
 516:	65 e0       	ldi	r22, 0x05	; 5
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTC, PIN6, GET_BIT(SSD1, 6));
 51e:	06 fb       	bst	r16, 6
 520:	44 27       	eor	r20, r20
 522:	40 f9       	bld	r20, 0
 524:	66 e0       	ldi	r22, 0x06	; 6
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	
// Set the segment pins for the tens digit
	DIO_Vid_Set_Pin_Val(PORTA, PIN1, GET_BIT(SSD2, 0));
 52c:	41 2f       	mov	r20, r17
 52e:	41 70       	andi	r20, 0x01	; 1
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTA, PIN2, GET_BIT(SSD2, 1));
 538:	11 fb       	bst	r17, 1
 53a:	44 27       	eor	r20, r20
 53c:	40 f9       	bld	r20, 0
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTA, PIN3, GET_BIT(SSD2, 2));
 546:	12 fb       	bst	r17, 2
 548:	44 27       	eor	r20, r20
 54a:	40 f9       	bld	r20, 0
 54c:	63 e0       	ldi	r22, 0x03	; 3
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTB, PIN0, GET_BIT(SSD2, 3));
 554:	13 fb       	bst	r17, 3
 556:	44 27       	eor	r20, r20
 558:	40 f9       	bld	r20, 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTB, PIN5, GET_BIT(SSD2, 4));
 562:	14 fb       	bst	r17, 4
 564:	44 27       	eor	r20, r20
 566:	40 f9       	bld	r20, 0
 568:	65 e0       	ldi	r22, 0x05	; 5
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTB, PIN6, GET_BIT(SSD2, 5));
 570:	15 fb       	bst	r17, 5
 572:	44 27       	eor	r20, r20
 574:	40 f9       	bld	r20, 0
 576:	66 e0       	ldi	r22, 0x06	; 6
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
	DIO_Vid_Set_Pin_Val(PORTB, PIN7, GET_BIT(SSD2, 6));
 57e:	16 fb       	bst	r17, 6
 580:	44 27       	eor	r20, r20
 582:	40 f9       	bld	r20, 0
 584:	67 e0       	ldi	r22, 0x07	; 7
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_Vid_Set_Pin_Val>
 58c:	2a 96       	adiw	r28, 0x0a	; 10
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <main>:
#define F_CPU 16000000UL
#include "util/delay.h"

int main(void)
{
	EEPROM_Init();
 5a2:	0e 94 04 01 	call	0x208	; 0x208 <EEPROM_Init>
	System_Init();
 5a6:	0e 94 11 01 	call	0x222	; 0x222 <System_Init>

	while (1)
	{
	}
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <main+0x8>

000005ac <ADC_Vid_Init>:
void ADC_Vid_Interrupt_Disable()
{
	/* enable global interrupt */
	GIE_Vid_Disable();
	/*enable INT */
	CLEAR_BIT(ADCSRA_REG, ADIE);
 5ac:	86 b1       	in	r24, 0x06	; 6
 5ae:	88 7f       	andi	r24, 0xF8	; 248
 5b0:	86 b9       	out	0x06, r24	; 6
 5b2:	86 b1       	in	r24, 0x06	; 6
 5b4:	87 60       	ori	r24, 0x07	; 7
 5b6:	86 b9       	out	0x06, r24	; 6
 5b8:	37 9a       	sbi	0x06, 7	; 6
 5ba:	08 95       	ret

000005bc <ADC_u16_Read>:
 5bc:	84 b1       	in	r24, 0x04	; 4
 5be:	95 b1       	in	r25, 0x05	; 5
 5c0:	08 95       	ret

000005c2 <ADC_Vid_Start_Conversion>:
 5c2:	97 b1       	in	r25, 0x07	; 7
 5c4:	90 7e       	andi	r25, 0xE0	; 224
 5c6:	97 b9       	out	0x07, r25	; 7
 5c8:	97 b1       	in	r25, 0x07	; 7
 5ca:	89 2b       	or	r24, r25
 5cc:	87 b9       	out	0x07, r24	; 7
 5ce:	36 9a       	sbi	0x06, 6	; 6
 5d0:	08 95       	ret

000005d2 <ADC_Vid_Interrupt_Enable>:
 5d2:	0e 94 c4 04 	call	0x988	; 0x988 <GIE_Vid_Enable>
 5d6:	33 9a       	sbi	0x06, 3	; 6
 5d8:	08 95       	ret

000005da <__vector_16>:
}

/* ISR ADC INT*/
ISR(ADC_INT)
{
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31

	ptr1();
 5fc:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <ptr1>
 600:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <ptr1+0x1>
 604:	09 95       	icall
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <ADC_Set_Call_Back>:

void ADC_Set_Call_Back(void (*ptr0)(void))
{
	ptr1 = ptr0;
 628:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <ptr1+0x1>
 62c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <ptr1>
 630:	08 95       	ret

00000632 <DIO_Vid_Set_Pin_Dir>:
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_Vid_Set_Pin_Dir(u8 Copy_u8_port, u8 Copy_u8_pin, u8 Copy_u8_dir)
{
	if (Copy_u8_dir == OUTPUT || Copy_u8_dir == INPUT)
 632:	42 30       	cpi	r20, 0x02	; 2
 634:	58 f5       	brcc	.+86     	; 0x68c <DIO_Vid_Set_Pin_Dir+0x5a>
	{
		volatile u8 *dir_reg;
		switch (Copy_u8_port)
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	31 f0       	breq	.+12     	; 0x646 <DIO_Vid_Set_Pin_Dir+0x14>
 63a:	70 f0       	brcs	.+28     	; 0x658 <DIO_Vid_Set_Pin_Dir+0x26>
 63c:	82 30       	cpi	r24, 0x02	; 2
 63e:	31 f0       	breq	.+12     	; 0x64c <DIO_Vid_Set_Pin_Dir+0x1a>
 640:	83 30       	cpi	r24, 0x03	; 3
 642:	39 f0       	breq	.+14     	; 0x652 <DIO_Vid_Set_Pin_Dir+0x20>
 644:	08 95       	ret
		{
			case PORTA: dir_reg = &DDRA_REG; break;
			case PORTB: dir_reg = &DDRB_REG; break;
 646:	e7 e3       	ldi	r30, 0x37	; 55
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	08 c0       	rjmp	.+16     	; 0x65c <DIO_Vid_Set_Pin_Dir+0x2a>
			case PORTC: dir_reg = &DDRC_REG; break;
 64c:	e4 e3       	ldi	r30, 0x34	; 52
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	05 c0       	rjmp	.+10     	; 0x65c <DIO_Vid_Set_Pin_Dir+0x2a>
			case PORTD: dir_reg = &DDRD_REG; break;
 652:	e1 e3       	ldi	r30, 0x31	; 49
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_Vid_Set_Pin_Dir+0x2a>
	if (Copy_u8_dir == OUTPUT || Copy_u8_dir == INPUT)
	{
		volatile u8 *dir_reg;
		switch (Copy_u8_port)
		{
			case PORTA: dir_reg = &DDRA_REG; break;
 658:	ea e3       	ldi	r30, 0x3A	; 58
 65a:	f0 e0       	ldi	r31, 0x00	; 0
			case PORTC: dir_reg = &DDRC_REG; break;
			case PORTD: dir_reg = &DDRD_REG; break;
			default: return;
		}

		if (Copy_u8_dir == OUTPUT)
 65c:	41 30       	cpi	r20, 0x01	; 1
 65e:	59 f4       	brne	.+22     	; 0x676 <DIO_Vid_Set_Pin_Dir+0x44>
		{
			SET_BIT(*dir_reg, Copy_u8_pin);
 660:	20 81       	ld	r18, Z
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_Vid_Set_Pin_Dir+0x3a>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	6a 95       	dec	r22
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_Vid_Set_Pin_Dir+0x36>
 670:	82 2b       	or	r24, r18
 672:	80 83       	st	Z, r24
 674:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(*dir_reg, Copy_u8_pin);
 676:	20 81       	ld	r18, Z
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_Vid_Set_Pin_Dir+0x50>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_Vid_Set_Pin_Dir+0x4c>
 686:	80 95       	com	r24
 688:	82 23       	and	r24, r18
 68a:	80 83       	st	Z, r24
 68c:	08 95       	ret

0000068e <DIO_Vid_Set_Pin_Val>:
	}
}

void DIO_Vid_Set_Pin_Val(u8 Copy_u8_port, u8 Copy_u8_pin, u8 Copy_u8_val)
{
	if (Copy_u8_val == HIGH || Copy_u8_val == LOW)
 68e:	42 30       	cpi	r20, 0x02	; 2
 690:	58 f5       	brcc	.+86     	; 0x6e8 <DIO_Vid_Set_Pin_Val+0x5a>
	{
		volatile u8 *port_reg;
		switch (Copy_u8_port)
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	31 f0       	breq	.+12     	; 0x6a2 <DIO_Vid_Set_Pin_Val+0x14>
 696:	70 f0       	brcs	.+28     	; 0x6b4 <DIO_Vid_Set_Pin_Val+0x26>
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	31 f0       	breq	.+12     	; 0x6a8 <DIO_Vid_Set_Pin_Val+0x1a>
 69c:	83 30       	cpi	r24, 0x03	; 3
 69e:	39 f0       	breq	.+14     	; 0x6ae <DIO_Vid_Set_Pin_Val+0x20>
 6a0:	08 95       	ret
		{
			case PORTA: port_reg = &PORTA_REG; break;
			case PORTB: port_reg = &PORTB_REG; break;
 6a2:	e8 e3       	ldi	r30, 0x38	; 56
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <DIO_Vid_Set_Pin_Val+0x2a>
			case PORTC: port_reg = &PORTC_REG; break;
 6a8:	e5 e3       	ldi	r30, 0x35	; 53
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <DIO_Vid_Set_Pin_Val+0x2a>
			case PORTD: port_reg = &PORTD_REG; break;
 6ae:	e2 e3       	ldi	r30, 0x32	; 50
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_Vid_Set_Pin_Val+0x2a>
	if (Copy_u8_val == HIGH || Copy_u8_val == LOW)
	{
		volatile u8 *port_reg;
		switch (Copy_u8_port)
		{
			case PORTA: port_reg = &PORTA_REG; break;
 6b4:	eb e3       	ldi	r30, 0x3B	; 59
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
			case PORTC: port_reg = &PORTC_REG; break;
			case PORTD: port_reg = &PORTD_REG; break;
			default: return;
		}

		if (Copy_u8_val == HIGH)
 6b8:	41 30       	cpi	r20, 0x01	; 1
 6ba:	59 f4       	brne	.+22     	; 0x6d2 <DIO_Vid_Set_Pin_Val+0x44>
		{
			SET_BIT(*port_reg, Copy_u8_pin);
 6bc:	20 81       	ld	r18, Z
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_Vid_Set_Pin_Val+0x3a>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_Vid_Set_Pin_Val+0x36>
 6cc:	82 2b       	or	r24, r18
 6ce:	80 83       	st	Z, r24
 6d0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(*port_reg, Copy_u8_pin);
 6d2:	20 81       	ld	r18, Z
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_Vid_Set_Pin_Val+0x50>
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	6a 95       	dec	r22
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_Vid_Set_Pin_Val+0x4c>
 6e2:	80 95       	com	r24
 6e4:	82 23       	and	r24, r18
 6e6:	80 83       	st	Z, r24
 6e8:	08 95       	ret

000006ea <DIO_u8_Get_Pin_Val>:
}

u8 DIO_u8_Get_Pin_Val(u8 Copy_u8_port, u8 Copy_u8_pin)
{
	volatile u8 *pin_reg;
	switch (Copy_u8_port)
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	31 f0       	breq	.+12     	; 0x6fa <DIO_u8_Get_Pin_Val+0x10>
 6ee:	70 f0       	brcs	.+28     	; 0x70c <DIO_u8_Get_Pin_Val+0x22>
 6f0:	82 30       	cpi	r24, 0x02	; 2
 6f2:	31 f0       	breq	.+12     	; 0x700 <DIO_u8_Get_Pin_Val+0x16>
 6f4:	83 30       	cpi	r24, 0x03	; 3
 6f6:	39 f0       	breq	.+14     	; 0x706 <DIO_u8_Get_Pin_Val+0x1c>
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <DIO_u8_Get_Pin_Val+0x38>
	{
		case PORTA: pin_reg = &PINA_REG; break;
		case PORTB: pin_reg = &PINB_REG; break;
 6fa:	e6 e3       	ldi	r30, 0x36	; 54
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <DIO_u8_Get_Pin_Val+0x26>
		case PORTC: pin_reg = &PINC_REG; break;
 700:	e3 e3       	ldi	r30, 0x33	; 51
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	05 c0       	rjmp	.+10     	; 0x710 <DIO_u8_Get_Pin_Val+0x26>
		case PORTD: pin_reg = &PIND_REG; break;
 706:	e0 e3       	ldi	r30, 0x30	; 48
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_u8_Get_Pin_Val+0x26>
u8 DIO_u8_Get_Pin_Val(u8 Copy_u8_port, u8 Copy_u8_pin)
{
	volatile u8 *pin_reg;
	switch (Copy_u8_port)
	{
		case PORTA: pin_reg = &PINA_REG; break;
 70c:	e9 e3       	ldi	r30, 0x39	; 57
 70e:	f0 e0       	ldi	r31, 0x00	; 0
		case PORTB: pin_reg = &PINB_REG; break;
		case PORTC: pin_reg = &PINC_REG; break;
		case PORTD: pin_reg = &PIND_REG; break;
		default: return 0;
	}
	return GET_BIT(*pin_reg, Copy_u8_pin);
 710:	80 81       	ld	r24, Z
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_u8_Get_Pin_Val+0x30>
 716:	95 95       	asr	r25
 718:	87 95       	ror	r24
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_u8_Get_Pin_Val+0x2c>
 71e:	81 70       	andi	r24, 0x01	; 1
 720:	08 95       	ret
	{
		case PORTA: pin_reg = &PINA_REG; break;
		case PORTB: pin_reg = &PINB_REG; break;
		case PORTC: pin_reg = &PINC_REG; break;
		case PORTD: pin_reg = &PIND_REG; break;
		default: return 0;
 722:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GET_BIT(*pin_reg, Copy_u8_pin);
}
 724:	08 95       	ret

00000726 <DIO_Vid_Toggle_Pin_Val>:

void DIO_Vid_Toggle_Pin_Val(u8 Copy_u8_port, u8 Copy_u8_pin)
{
	volatile u8 *port_reg;
	switch (Copy_u8_port)
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	31 f0       	breq	.+12     	; 0x736 <DIO_Vid_Toggle_Pin_Val+0x10>
 72a:	70 f0       	brcs	.+28     	; 0x748 <DIO_Vid_Toggle_Pin_Val+0x22>
 72c:	82 30       	cpi	r24, 0x02	; 2
 72e:	31 f0       	breq	.+12     	; 0x73c <DIO_Vid_Toggle_Pin_Val+0x16>
 730:	83 30       	cpi	r24, 0x03	; 3
 732:	39 f0       	breq	.+14     	; 0x742 <DIO_Vid_Toggle_Pin_Val+0x1c>
 734:	08 95       	ret
	{
		case PORTA: port_reg = &PORTA_REG; break;
		case PORTB: port_reg = &PORTB_REG; break;
 736:	e8 e3       	ldi	r30, 0x38	; 56
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	08 c0       	rjmp	.+16     	; 0x74c <DIO_Vid_Toggle_Pin_Val+0x26>
		case PORTC: port_reg = &PORTC_REG; break;
 73c:	e5 e3       	ldi	r30, 0x35	; 53
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	05 c0       	rjmp	.+10     	; 0x74c <DIO_Vid_Toggle_Pin_Val+0x26>
		case PORTD: port_reg = &PORTD_REG; break;
 742:	e2 e3       	ldi	r30, 0x32	; 50
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_Vid_Toggle_Pin_Val+0x26>
void DIO_Vid_Toggle_Pin_Val(u8 Copy_u8_port, u8 Copy_u8_pin)
{
	volatile u8 *port_reg;
	switch (Copy_u8_port)
	{
		case PORTA: port_reg = &PORTA_REG; break;
 748:	eb e3       	ldi	r30, 0x3B	; 59
 74a:	f0 e0       	ldi	r31, 0x00	; 0
		case PORTB: port_reg = &PORTB_REG; break;
		case PORTC: port_reg = &PORTC_REG; break;
		case PORTD: port_reg = &PORTD_REG; break;
		default: return;
	}
	TOGGLE_BIT(*port_reg, Copy_u8_pin);
 74c:	20 81       	ld	r18, Z
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_Vid_Toggle_Pin_Val+0x32>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	6a 95       	dec	r22
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_Vid_Toggle_Pin_Val+0x2e>
 75c:	82 27       	eor	r24, r18
 75e:	80 83       	st	Z, r24
 760:	08 95       	ret

00000762 <DIO_Vid_Set_Port_Dir>:
}

void DIO_Vid_Set_Port_Dir(u8 Copy_u8_port, u8 Copy_u8_dir)
{
	volatile u8 *dir_reg;
	switch (Copy_u8_port)
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	31 f0       	breq	.+12     	; 0x772 <DIO_Vid_Set_Port_Dir+0x10>
 766:	70 f0       	brcs	.+28     	; 0x784 <DIO_Vid_Set_Port_Dir+0x22>
 768:	82 30       	cpi	r24, 0x02	; 2
 76a:	31 f0       	breq	.+12     	; 0x778 <DIO_Vid_Set_Port_Dir+0x16>
 76c:	83 30       	cpi	r24, 0x03	; 3
 76e:	39 f0       	breq	.+14     	; 0x77e <DIO_Vid_Set_Port_Dir+0x1c>
 770:	08 95       	ret
	{
		case PORTA: dir_reg = &DDRA_REG; break;
		case PORTB: dir_reg = &DDRB_REG; break;
 772:	e7 e3       	ldi	r30, 0x37	; 55
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	08 c0       	rjmp	.+16     	; 0x788 <DIO_Vid_Set_Port_Dir+0x26>
		case PORTC: dir_reg = &DDRC_REG; break;
 778:	e4 e3       	ldi	r30, 0x34	; 52
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	05 c0       	rjmp	.+10     	; 0x788 <DIO_Vid_Set_Port_Dir+0x26>
		case PORTD: dir_reg = &DDRD_REG; break;
 77e:	e1 e3       	ldi	r30, 0x31	; 49
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_Vid_Set_Port_Dir+0x26>
void DIO_Vid_Set_Port_Dir(u8 Copy_u8_port, u8 Copy_u8_dir)
{
	volatile u8 *dir_reg;
	switch (Copy_u8_port)
	{
		case PORTA: dir_reg = &DDRA_REG; break;
 784:	ea e3       	ldi	r30, 0x3A	; 58
 786:	f0 e0       	ldi	r31, 0x00	; 0
		case PORTB: dir_reg = &DDRB_REG; break;
		case PORTC: dir_reg = &DDRC_REG; break;
		case PORTD: dir_reg = &DDRD_REG; break;
		default: return;
	}
	*dir_reg = (Copy_u8_dir == PORT_OUTPUT) ? PORT_OUTPUT : PORT_INPUT;
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	6f 3f       	cpi	r22, 0xFF	; 255
 78c:	09 f0       	breq	.+2      	; 0x790 <DIO_Vid_Set_Port_Dir+0x2e>
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	81 95       	neg	r24
 792:	80 83       	st	Z, r24
 794:	08 95       	ret

00000796 <EEPROM_Send>:
void EEPROM_Send(u16 copy_u16_addr, u8 copy_u16_data)
{
	u8 INT_EN = 0;

	// Setup Address Register
	EEARL_REG = (unsigned char)copy_u16_addr;
 796:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (unsigned char)(copy_u16_addr >> 8);
 798:	9f bb       	out	0x1f, r25	; 31

	// Put Data in Data Register
	EEDR_REG = copy_u16_data;
 79a:	6d bb       	out	0x1d, r22	; 29

	// Disable Interrupts
	if (((SREG_REG & (1 << 7)) >> 7) == 1)
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	07 fe       	sbrs	r0, 7
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <EEPROM_Send+0x16>
	{
		INT_EN = 1;
		CLEAR_BIT(SREG_REG, 7);
 7a2:	8f b7       	in	r24, 0x3f	; 63
 7a4:	8f 77       	andi	r24, 0x7F	; 127
 7a6:	8f bf       	out	0x3f, r24	; 63
	EEDR_REG = copy_u16_data;

	// Disable Interrupts
	if (((SREG_REG & (1 << 7)) >> 7) == 1)
	{
		INT_EN = 1;
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <EEPROM_Send+0x18>
#include "../Interrupts/GIE_private.h"
#include "EEPROM.h"

void EEPROM_Send(u16 copy_u16_addr, u8 copy_u16_data)
{
	u8 INT_EN = 0;
 7ac:	80 e0       	ldi	r24, 0x00	; 0
		INT_EN = 1;
		CLEAR_BIT(SREG_REG, 7);
	}

	// Start Writing
	SET_BIT(EECR_REG, EEMWE);
 7ae:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR_REG, EEWE);
 7b0:	e1 9a       	sbi	0x1c, 1	; 28
	while (((EECR_REG & (1 << EEWE)) >> EEWE) == 1)
 7b2:	e1 99       	sbic	0x1c, 1	; 28
 7b4:	fe cf       	rjmp	.-4      	; 0x7b2 <EEPROM_Send+0x1c>
		;

	// Back
	if (INT_EN == 1)
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	19 f4       	brne	.+6      	; 0x7c0 <EEPROM_Send+0x2a>
	{
		SET_BIT(SREG_REG, 7);
 7ba:	8f b7       	in	r24, 0x3f	; 63
 7bc:	80 68       	ori	r24, 0x80	; 128
 7be:	8f bf       	out	0x3f, r24	; 63
 7c0:	08 95       	ret

000007c2 <EEPROM_Recieve>:
}

unsigned char EEPROM_Recieve(u16 copy_u16_addr)
{
	// Setup Address Register
	EEARL_REG = (unsigned char)copy_u16_addr;
 7c2:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (unsigned char)(copy_u16_addr >> 8);
 7c4:	9f bb       	out	0x1f, r25	; 31

	// Start Reading
	SET_BIT(EECR_REG, EERE);
 7c6:	e0 9a       	sbi	0x1c, 0	; 28

	// Return Data
	return EEDR_REG;
 7c8:	8d b3       	in	r24, 0x1d	; 29
}
 7ca:	08 95       	ret

000007cc <EXT_Vid_Interrupt_Init0>:
void (*ptr_int2)(void);

void EXT_Vid_Interrupt_Init0(u8 SENSE_CONTROL)
{

	if (SENSE_CONTROL == RISING_EDGE)
 7cc:	81 11       	cpse	r24, r1
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <EXT_Vid_Interrupt_Init0+0x12>
	{

		/* INT0*/
		SET_BIT(MCUCR_REG, ISC01);
 7d0:	85 b7       	in	r24, 0x35	; 53
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR_REG, ISC00);
 7d6:	85 b7       	in	r24, 0x35	; 53
 7d8:	81 60       	ori	r24, 0x01	; 1
 7da:	85 bf       	out	0x35, r24	; 53
 7dc:	08 95       	ret
	}
	if (SENSE_CONTROL == FALLING_EDGE)
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <EXT_Vid_Interrupt_Init0+0x24>
	{
		/* INT0*/
		SET_BIT(MCUCR_REG, ISC01);
 7e2:	85 b7       	in	r24, 0x35	; 53
 7e4:	82 60       	ori	r24, 0x02	; 2
 7e6:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR_REG, ISC00);
 7e8:	85 b7       	in	r24, 0x35	; 53
 7ea:	8e 7f       	andi	r24, 0xFE	; 254
 7ec:	85 bf       	out	0x35, r24	; 53
 7ee:	08 95       	ret
	}
	if (SENSE_CONTROL == ANY_LOGIC_CHANGE)
 7f0:	82 30       	cpi	r24, 0x02	; 2
 7f2:	31 f4       	brne	.+12     	; 0x800 <EXT_Vid_Interrupt_Init0+0x34>
	{
		/* INT0*/
		CLEAR_BIT(MCUCR_REG, ISC01);
 7f4:	85 b7       	in	r24, 0x35	; 53
 7f6:	8d 7f       	andi	r24, 0xFD	; 253
 7f8:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR_REG, ISC00);
 7fa:	85 b7       	in	r24, 0x35	; 53
 7fc:	81 60       	ori	r24, 0x01	; 1
 7fe:	85 bf       	out	0x35, r24	; 53
 800:	08 95       	ret

00000802 <EXT_Vid_Interrupt_Init1>:
	}
}

void EXT_Vid_Interrupt_Init1(u8 SENSE_CONTROL)
{
	if (SENSE_CONTROL == RISING_EDGE)
 802:	81 11       	cpse	r24, r1
 804:	07 c0       	rjmp	.+14     	; 0x814 <EXT_Vid_Interrupt_Init1+0x12>
	{

		/* INT1*/
		SET_BIT(MCUCR_REG, ISC11);
 806:	85 b7       	in	r24, 0x35	; 53
 808:	88 60       	ori	r24, 0x08	; 8
 80a:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR_REG, ISC10);
 80c:	85 b7       	in	r24, 0x35	; 53
 80e:	84 60       	ori	r24, 0x04	; 4
 810:	85 bf       	out	0x35, r24	; 53
 812:	08 95       	ret
	}
	if (SENSE_CONTROL == FALLING_EDGE)
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	39 f4       	brne	.+14     	; 0x826 <EXT_Vid_Interrupt_Init1+0x24>
	{
		/* INT1*/
		SET_BIT(MCUCR_REG, ISC11);
 818:	85 b7       	in	r24, 0x35	; 53
 81a:	88 60       	ori	r24, 0x08	; 8
 81c:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR_REG, ISC10);
 81e:	85 b7       	in	r24, 0x35	; 53
 820:	8b 7f       	andi	r24, 0xFB	; 251
 822:	85 bf       	out	0x35, r24	; 53
 824:	08 95       	ret
	}
	if (SENSE_CONTROL == ANY_LOGIC_CHANGE)
 826:	82 30       	cpi	r24, 0x02	; 2
 828:	31 f4       	brne	.+12     	; 0x836 <EXT_Vid_Interrupt_Init1+0x34>
	{
		/* INT1*/
		CLEAR_BIT(MCUCR_REG, ISC11);
 82a:	85 b7       	in	r24, 0x35	; 53
 82c:	87 7f       	andi	r24, 0xF7	; 247
 82e:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR_REG, ISC10);
 830:	85 b7       	in	r24, 0x35	; 53
 832:	84 60       	ori	r24, 0x04	; 4
 834:	85 bf       	out	0x35, r24	; 53
 836:	08 95       	ret

00000838 <EXT_Vid_Interrupt_Init2>:
	}
}

void EXT_Vid_Interrupt_Init2(u8 SENSE_CONTROL)
{
	if (SENSE_CONTROL == RISING_EDGE)
 838:	81 11       	cpse	r24, r1
 83a:	04 c0       	rjmp	.+8      	; 0x844 <EXT_Vid_Interrupt_Init2+0xc>
	{
		SET_BIT(MCUCSR_REG, ISC2);
 83c:	84 b7       	in	r24, 0x34	; 52
 83e:	80 64       	ori	r24, 0x40	; 64
 840:	84 bf       	out	0x34, r24	; 52
 842:	08 95       	ret
	}

	if (SENSE_CONTROL == FALLING_EDGE)
 844:	81 30       	cpi	r24, 0x01	; 1
 846:	19 f4       	brne	.+6      	; 0x84e <EXT_Vid_Interrupt_Init2+0x16>
	{
		CLEAR_BIT(MCUCSR_REG, ISC2);
 848:	84 b7       	in	r24, 0x34	; 52
 84a:	8f 7b       	andi	r24, 0xBF	; 191
 84c:	84 bf       	out	0x34, r24	; 52
 84e:	08 95       	ret

00000850 <EXT_Vid_Interrupt0>:
}

void EXT_Vid_Interrupt0()
{
	/* enable global interrupt */
	GIE_Vid_Enable();
 850:	0e 94 c4 04 	call	0x988	; 0x988 <GIE_Vid_Enable>
	/*enable INT0 */
	SET_BIT(GICR_REG, INT_0_PIN);
 854:	8b b7       	in	r24, 0x3b	; 59
 856:	80 64       	ori	r24, 0x40	; 64
 858:	8b bf       	out	0x3b, r24	; 59
 85a:	08 95       	ret

0000085c <EXT_Vid_Interrupt1>:
}

void EXT_Vid_Interrupt1()
{
	GIE_Vid_Enable();
 85c:	0e 94 c4 04 	call	0x988	; 0x988 <GIE_Vid_Enable>
	SET_BIT(GICR_REG, INT_1_PIN);
 860:	8b b7       	in	r24, 0x3b	; 59
 862:	80 68       	ori	r24, 0x80	; 128
 864:	8b bf       	out	0x3b, r24	; 59
 866:	08 95       	ret

00000868 <EXT_Vid_Interrupt2>:
}

void EXT_Vid_Interrupt2()
{
	GIE_Vid_Enable();
 868:	0e 94 c4 04 	call	0x988	; 0x988 <GIE_Vid_Enable>
	SET_BIT(GICR_REG, INT_2_PIN);
 86c:	8b b7       	in	r24, 0x3b	; 59
 86e:	80 62       	ori	r24, 0x20	; 32
 870:	8b bf       	out	0x3b, r24	; 59
 872:	08 95       	ret

00000874 <EXT_Vid_Set_CallBack>:
}

void EXT_Vid_Set_CallBack(void (*ptr_set_callback)(void))
{

	ptr_int0 = ptr_set_callback;
 874:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <ptr_int0+0x1>
 878:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <ptr_int0>
 87c:	08 95       	ret

0000087e <EXT_Vid_Set_CallBack_2>:
}
void EXT_Vid_Set_CallBack_2(void (*ptr_set_callback)(void))
{
	ptr_int1 = ptr_set_callback;
 87e:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <ptr_int1+0x1>
 882:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <ptr_int1>
 886:	08 95       	ret

00000888 <EXT_Vid_Set_CallBack_3>:
}
void EXT_Vid_Set_CallBack_3(void (*ptr_set_callback)(void))
{
	ptr_int2 = ptr_set_callback;
 888:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <ptr_int2+0x1>
 88c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <ptr_int2>
 890:	08 95       	ret

00000892 <__vector_1>:
}

ISR(INT_0)
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
	if (ptr_int0 != NULL)
 8b4:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <ptr_int0>
 8b8:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <ptr_int0+0x1>
 8bc:	30 97       	sbiw	r30, 0x00	; 0
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__vector_1+0x30>
	{
		ptr_int0();
 8c0:	09 95       	icall
	}
}
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	bf 91       	pop	r27
 8c8:	af 91       	pop	r26
 8ca:	9f 91       	pop	r25
 8cc:	8f 91       	pop	r24
 8ce:	7f 91       	pop	r23
 8d0:	6f 91       	pop	r22
 8d2:	5f 91       	pop	r21
 8d4:	4f 91       	pop	r20
 8d6:	3f 91       	pop	r19
 8d8:	2f 91       	pop	r18
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	0f 90       	pop	r0
 8e0:	1f 90       	pop	r1
 8e2:	18 95       	reti

000008e4 <__vector_2>:

ISR(INT_1)
{
 8e4:	1f 92       	push	r1
 8e6:	0f 92       	push	r0
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	0f 92       	push	r0
 8ec:	11 24       	eor	r1, r1
 8ee:	2f 93       	push	r18
 8f0:	3f 93       	push	r19
 8f2:	4f 93       	push	r20
 8f4:	5f 93       	push	r21
 8f6:	6f 93       	push	r22
 8f8:	7f 93       	push	r23
 8fa:	8f 93       	push	r24
 8fc:	9f 93       	push	r25
 8fe:	af 93       	push	r26
 900:	bf 93       	push	r27
 902:	ef 93       	push	r30
 904:	ff 93       	push	r31
	if (ptr_int1 != NULL)
 906:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <ptr_int1>
 90a:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <ptr_int1+0x1>
 90e:	30 97       	sbiw	r30, 0x00	; 0
 910:	09 f0       	breq	.+2      	; 0x914 <__vector_2+0x30>
	{
		ptr_int1();
 912:	09 95       	icall
	}
}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	0f 90       	pop	r0
 92e:	0f be       	out	0x3f, r0	; 63
 930:	0f 90       	pop	r0
 932:	1f 90       	pop	r1
 934:	18 95       	reti

00000936 <__vector_3>:

ISR(INT_2)
{
 936:	1f 92       	push	r1
 938:	0f 92       	push	r0
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	0f 92       	push	r0
 93e:	11 24       	eor	r1, r1
 940:	2f 93       	push	r18
 942:	3f 93       	push	r19
 944:	4f 93       	push	r20
 946:	5f 93       	push	r21
 948:	6f 93       	push	r22
 94a:	7f 93       	push	r23
 94c:	8f 93       	push	r24
 94e:	9f 93       	push	r25
 950:	af 93       	push	r26
 952:	bf 93       	push	r27
 954:	ef 93       	push	r30
 956:	ff 93       	push	r31
	if (ptr_int2 != NULL)
 958:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <ptr_int2>
 95c:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <ptr_int2+0x1>
 960:	30 97       	sbiw	r30, 0x00	; 0
 962:	09 f0       	breq	.+2      	; 0x966 <__vector_3+0x30>
	{
		ptr_int2();
 964:	09 95       	icall
	}
}
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	bf 91       	pop	r27
 96c:	af 91       	pop	r26
 96e:	9f 91       	pop	r25
 970:	8f 91       	pop	r24
 972:	7f 91       	pop	r23
 974:	6f 91       	pop	r22
 976:	5f 91       	pop	r21
 978:	4f 91       	pop	r20
 97a:	3f 91       	pop	r19
 97c:	2f 91       	pop	r18
 97e:	0f 90       	pop	r0
 980:	0f be       	out	0x3f, r0	; 63
 982:	0f 90       	pop	r0
 984:	1f 90       	pop	r1
 986:	18 95       	reti

00000988 <GIE_Vid_Enable>:
#include "GIE_private.h"

void GIE_Vid_Enable()
{

	SET_BIT(SREG_REG, 7);
 988:	8f b7       	in	r24, 0x3f	; 63
 98a:	80 68       	ori	r24, 0x80	; 128
 98c:	8f bf       	out	0x3f, r24	; 63
 98e:	08 95       	ret

00000990 <TIMER0_Vid_Start>:
	OCR_REG = CTC_OF;
	TIMER0_Vid_Start(prescaler);

	while (GET_BIT(TIFR_REG, OCF0) == 0)
		;
	SET_BIT(TIFR_REG, OCF0);
 990:	93 b7       	in	r25, 0x33	; 51
 992:	98 7f       	andi	r25, 0xF8	; 248
 994:	93 bf       	out	0x33, r25	; 51
 996:	93 b7       	in	r25, 0x33	; 51
 998:	97 7f       	andi	r25, 0xF7	; 247
 99a:	93 bf       	out	0x33, r25	; 51
 99c:	93 b7       	in	r25, 0x33	; 51
 99e:	9f 7b       	andi	r25, 0xBF	; 191
 9a0:	93 bf       	out	0x33, r25	; 51
 9a2:	93 b7       	in	r25, 0x33	; 51
 9a4:	89 2b       	or	r24, r25
 9a6:	83 bf       	out	0x33, r24	; 51
 9a8:	08 95       	ret

000009aa <TIMER0_Vid_Interrupt_Enable_Every>:
 9aa:	cf 92       	push	r12
 9ac:	df 92       	push	r13
 9ae:	ef 92       	push	r14
 9b0:	ff 92       	push	r15
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	ec 01       	movw	r28, r24
 9b8:	0e 94 c4 04 	call	0x988	; 0x988 <GIE_Vid_Enable>
 9bc:	89 b7       	in	r24, 0x39	; 57
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	89 bf       	out	0x39, r24	; 57
 9c2:	be 01       	movw	r22, r28
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
 9cc:	6b 01       	movw	r12, r22
 9ce:	7c 01       	movw	r14, r24
 9d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <AR_Prescaler+0x6>
 9d4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <AR_Prescaler+0x7>
 9d8:	bc 01       	movw	r22, r24
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	40 e8       	ldi	r20, 0x80	; 128
 9e8:	53 e4       	ldi	r21, 0x43	; 67
 9ea:	0e 94 e7 06 	call	0xdce	; 0xdce <__mulsf3>
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	4a e7       	ldi	r20, 0x7A	; 122
 9f4:	56 e4       	ldi	r21, 0x46	; 70
 9f6:	0e 94 b8 05 	call	0xb70	; 0xb70 <__divsf3>
 9fa:	9b 01       	movw	r18, r22
 9fc:	ac 01       	movw	r20, r24
 9fe:	c7 01       	movw	r24, r14
 a00:	b6 01       	movw	r22, r12
 a02:	0e 94 b8 05 	call	0xb70	; 0xb70 <__divsf3>
 a06:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fixunssfsi>
 a0a:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <OF_Count+0x1>
 a0e:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <OF_Count>
 a12:	83 e0       	ldi	r24, 0x03	; 3
 a14:	0e 94 c8 04 	call	0x990	; 0x990 <TIMER0_Vid_Start>
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	ff 90       	pop	r15
 a1e:	ef 90       	pop	r14
 a20:	df 90       	pop	r13
 a22:	cf 90       	pop	r12
 a24:	08 95       	ret

00000a26 <TIMER0_Vid_Set_CallBack>:
}

void TIMER0_Vid_Set_CallBack(void (*ptr_set_callback)(void))
{
	ptr_TIMER0_int = ptr_set_callback;
 a26:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <ptr_TIMER0_int+0x1>
 a2a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <ptr_TIMER0_int>
 a2e:	08 95       	ret

00000a30 <__vector_11>:
}

ISR(TIMER0_OF)
{
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	2f 93       	push	r18
 a3c:	3f 93       	push	r19
 a3e:	4f 93       	push	r20
 a40:	5f 93       	push	r21
 a42:	6f 93       	push	r22
 a44:	7f 93       	push	r23
 a46:	8f 93       	push	r24
 a48:	9f 93       	push	r25
 a4a:	af 93       	push	r26
 a4c:	bf 93       	push	r27
 a4e:	ef 93       	push	r30
 a50:	ff 93       	push	r31

	if (ptr_TIMER0_int != NULL)
 a52:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <ptr_TIMER0_int>
 a56:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <ptr_TIMER0_int+0x1>
 a5a:	30 97       	sbiw	r30, 0x00	; 0
 a5c:	09 f0       	breq	.+2      	; 0xa60 <__vector_11+0x30>
	{
		ptr_TIMER0_int();
 a5e:	09 95       	icall
	}
 a60:	ff 91       	pop	r31
 a62:	ef 91       	pop	r30
 a64:	bf 91       	pop	r27
 a66:	af 91       	pop	r26
 a68:	9f 91       	pop	r25
 a6a:	8f 91       	pop	r24
 a6c:	7f 91       	pop	r23
 a6e:	6f 91       	pop	r22
 a70:	5f 91       	pop	r21
 a72:	4f 91       	pop	r20
 a74:	3f 91       	pop	r19
 a76:	2f 91       	pop	r18
 a78:	0f 90       	pop	r0
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	0f 90       	pop	r0
 a7e:	1f 90       	pop	r1
 a80:	18 95       	reti

00000a82 <TIMER1_Vid_Start>:
	ptr_CV();
}

void Timer1_OF_SetCallBack(void (*ptr)(void))
{
	ptr_OF = ptr;
 a82:	9e b5       	in	r25, 0x2e	; 46
 a84:	98 7f       	andi	r25, 0xF8	; 248
 a86:	9e bd       	out	0x2e, r25	; 46
 a88:	9f b5       	in	r25, 0x2f	; 47
 a8a:	9e 7f       	andi	r25, 0xFE	; 254
 a8c:	9f bd       	out	0x2f, r25	; 47
 a8e:	9f b5       	in	r25, 0x2f	; 47
 a90:	9d 7f       	andi	r25, 0xFD	; 253
 a92:	9f bd       	out	0x2f, r25	; 47
 a94:	9e b5       	in	r25, 0x2e	; 46
 a96:	97 7f       	andi	r25, 0xF7	; 247
 a98:	9e bd       	out	0x2e, r25	; 46
 a9a:	9e b5       	in	r25, 0x2e	; 46
 a9c:	9f 7e       	andi	r25, 0xEF	; 239
 a9e:	9e bd       	out	0x2e, r25	; 46
 aa0:	9e b5       	in	r25, 0x2e	; 46
 aa2:	89 2b       	or	r24, r25
 aa4:	8e bd       	out	0x2e, r24	; 46
 aa6:	08 95       	ret

00000aa8 <TIMER1_Vid_CTC_Init>:
 aa8:	8e b5       	in	r24, 0x2e	; 46
 aaa:	88 60       	ori	r24, 0x08	; 8
 aac:	8e bd       	out	0x2e, r24	; 46
 aae:	84 e2       	ldi	r24, 0x24	; 36
 ab0:	94 ef       	ldi	r25, 0xF4	; 244
 ab2:	9b bd       	out	0x2b, r25	; 43
 ab4:	8a bd       	out	0x2a, r24	; 42
 ab6:	84 e0       	ldi	r24, 0x04	; 4
 ab8:	0e 94 41 05 	call	0xa82	; 0xa82 <TIMER1_Vid_Start>
 abc:	0e 94 c4 04 	call	0x988	; 0x988 <GIE_Vid_Enable>
 ac0:	08 95       	ret

00000ac2 <TIMER1_Vid_CTC_InterruptEnable>:
 ac2:	89 b7       	in	r24, 0x39	; 57
 ac4:	80 61       	ori	r24, 0x10	; 16
 ac6:	89 bf       	out	0x39, r24	; 57
 ac8:	08 95       	ret

00000aca <Timer1_CTC_SetCallBack>:
 aca:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <ptr_CV+0x1>
 ace:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <ptr_CV>
 ad2:	08 95       	ret

00000ad4 <__vector_7>:
 ad4:	1f 92       	push	r1
 ad6:	0f 92       	push	r0
 ad8:	0f b6       	in	r0, 0x3f	; 63
 ada:	0f 92       	push	r0
 adc:	11 24       	eor	r1, r1
 ade:	2f 93       	push	r18
 ae0:	3f 93       	push	r19
 ae2:	4f 93       	push	r20
 ae4:	5f 93       	push	r21
 ae6:	6f 93       	push	r22
 ae8:	7f 93       	push	r23
 aea:	8f 93       	push	r24
 aec:	9f 93       	push	r25
 aee:	af 93       	push	r26
 af0:	bf 93       	push	r27
 af2:	ef 93       	push	r30
 af4:	ff 93       	push	r31
 af6:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <ptr_CV>
 afa:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <ptr_CV+0x1>
 afe:	09 95       	icall
 b00:	ff 91       	pop	r31
 b02:	ef 91       	pop	r30
 b04:	bf 91       	pop	r27
 b06:	af 91       	pop	r26
 b08:	9f 91       	pop	r25
 b0a:	8f 91       	pop	r24
 b0c:	7f 91       	pop	r23
 b0e:	6f 91       	pop	r22
 b10:	5f 91       	pop	r21
 b12:	4f 91       	pop	r20
 b14:	3f 91       	pop	r19
 b16:	2f 91       	pop	r18
 b18:	0f 90       	pop	r0
 b1a:	0f be       	out	0x3f, r0	; 63
 b1c:	0f 90       	pop	r0
 b1e:	1f 90       	pop	r1
 b20:	18 95       	reti

00000b22 <__vector_9>:
}

ISR(TIMER1_OVF)
{
 b22:	1f 92       	push	r1
 b24:	0f 92       	push	r0
 b26:	0f b6       	in	r0, 0x3f	; 63
 b28:	0f 92       	push	r0
 b2a:	11 24       	eor	r1, r1
 b2c:	2f 93       	push	r18
 b2e:	3f 93       	push	r19
 b30:	4f 93       	push	r20
 b32:	5f 93       	push	r21
 b34:	6f 93       	push	r22
 b36:	7f 93       	push	r23
 b38:	8f 93       	push	r24
 b3a:	9f 93       	push	r25
 b3c:	af 93       	push	r26
 b3e:	bf 93       	push	r27
 b40:	ef 93       	push	r30
 b42:	ff 93       	push	r31

	ptr_OF();
 b44:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <ptr_OF>
 b48:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <ptr_OF+0x1>
 b4c:	09 95       	icall
}
 b4e:	ff 91       	pop	r31
 b50:	ef 91       	pop	r30
 b52:	bf 91       	pop	r27
 b54:	af 91       	pop	r26
 b56:	9f 91       	pop	r25
 b58:	8f 91       	pop	r24
 b5a:	7f 91       	pop	r23
 b5c:	6f 91       	pop	r22
 b5e:	5f 91       	pop	r21
 b60:	4f 91       	pop	r20
 b62:	3f 91       	pop	r19
 b64:	2f 91       	pop	r18
 b66:	0f 90       	pop	r0
 b68:	0f be       	out	0x3f, r0	; 63
 b6a:	0f 90       	pop	r0
 b6c:	1f 90       	pop	r1
 b6e:	18 95       	reti

00000b70 <__divsf3>:
 b70:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divsf3x>
 b74:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_round>
 b78:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_pscB>
 b7c:	58 f0       	brcs	.+22     	; 0xb94 <__divsf3+0x24>
 b7e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_pscA>
 b82:	40 f0       	brcs	.+16     	; 0xb94 <__divsf3+0x24>
 b84:	29 f4       	brne	.+10     	; 0xb90 <__divsf3+0x20>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	29 f0       	breq	.+10     	; 0xb94 <__divsf3+0x24>
 b8a:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
 b8e:	51 11       	cpse	r21, r1
 b90:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_szero>
 b94:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_nan>

00000b98 <__divsf3x>:
 b98:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_split3>
 b9c:	68 f3       	brcs	.-38     	; 0xb78 <__divsf3+0x8>

00000b9e <__divsf3_pse>:
 b9e:	99 23       	and	r25, r25
 ba0:	b1 f3       	breq	.-20     	; 0xb8e <__divsf3+0x1e>
 ba2:	55 23       	and	r21, r21
 ba4:	91 f3       	breq	.-28     	; 0xb8a <__divsf3+0x1a>
 ba6:	95 1b       	sub	r25, r21
 ba8:	55 0b       	sbc	r21, r21
 baa:	bb 27       	eor	r27, r27
 bac:	aa 27       	eor	r26, r26
 bae:	62 17       	cp	r22, r18
 bb0:	73 07       	cpc	r23, r19
 bb2:	84 07       	cpc	r24, r20
 bb4:	38 f0       	brcs	.+14     	; 0xbc4 <__divsf3_pse+0x26>
 bb6:	9f 5f       	subi	r25, 0xFF	; 255
 bb8:	5f 4f       	sbci	r21, 0xFF	; 255
 bba:	22 0f       	add	r18, r18
 bbc:	33 1f       	adc	r19, r19
 bbe:	44 1f       	adc	r20, r20
 bc0:	aa 1f       	adc	r26, r26
 bc2:	a9 f3       	breq	.-22     	; 0xbae <__divsf3_pse+0x10>
 bc4:	35 d0       	rcall	.+106    	; 0xc30 <__divsf3_pse+0x92>
 bc6:	0e 2e       	mov	r0, r30
 bc8:	3a f0       	brmi	.+14     	; 0xbd8 <__divsf3_pse+0x3a>
 bca:	e0 e8       	ldi	r30, 0x80	; 128
 bcc:	32 d0       	rcall	.+100    	; 0xc32 <__divsf3_pse+0x94>
 bce:	91 50       	subi	r25, 0x01	; 1
 bd0:	50 40       	sbci	r21, 0x00	; 0
 bd2:	e6 95       	lsr	r30
 bd4:	00 1c       	adc	r0, r0
 bd6:	ca f7       	brpl	.-14     	; 0xbca <__divsf3_pse+0x2c>
 bd8:	2b d0       	rcall	.+86     	; 0xc30 <__divsf3_pse+0x92>
 bda:	fe 2f       	mov	r31, r30
 bdc:	29 d0       	rcall	.+82     	; 0xc30 <__divsf3_pse+0x92>
 bde:	66 0f       	add	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	bb 1f       	adc	r27, r27
 be6:	26 17       	cp	r18, r22
 be8:	37 07       	cpc	r19, r23
 bea:	48 07       	cpc	r20, r24
 bec:	ab 07       	cpc	r26, r27
 bee:	b0 e8       	ldi	r27, 0x80	; 128
 bf0:	09 f0       	breq	.+2      	; 0xbf4 <__divsf3_pse+0x56>
 bf2:	bb 0b       	sbc	r27, r27
 bf4:	80 2d       	mov	r24, r0
 bf6:	bf 01       	movw	r22, r30
 bf8:	ff 27       	eor	r31, r31
 bfa:	93 58       	subi	r25, 0x83	; 131
 bfc:	5f 4f       	sbci	r21, 0xFF	; 255
 bfe:	3a f0       	brmi	.+14     	; 0xc0e <__divsf3_pse+0x70>
 c00:	9e 3f       	cpi	r25, 0xFE	; 254
 c02:	51 05       	cpc	r21, r1
 c04:	78 f0       	brcs	.+30     	; 0xc24 <__divsf3_pse+0x86>
 c06:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
 c0a:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_szero>
 c0e:	5f 3f       	cpi	r21, 0xFF	; 255
 c10:	e4 f3       	brlt	.-8      	; 0xc0a <__divsf3_pse+0x6c>
 c12:	98 3e       	cpi	r25, 0xE8	; 232
 c14:	d4 f3       	brlt	.-12     	; 0xc0a <__divsf3_pse+0x6c>
 c16:	86 95       	lsr	r24
 c18:	77 95       	ror	r23
 c1a:	67 95       	ror	r22
 c1c:	b7 95       	ror	r27
 c1e:	f7 95       	ror	r31
 c20:	9f 5f       	subi	r25, 0xFF	; 255
 c22:	c9 f7       	brne	.-14     	; 0xc16 <__divsf3_pse+0x78>
 c24:	88 0f       	add	r24, r24
 c26:	91 1d       	adc	r25, r1
 c28:	96 95       	lsr	r25
 c2a:	87 95       	ror	r24
 c2c:	97 f9       	bld	r25, 7
 c2e:	08 95       	ret
 c30:	e1 e0       	ldi	r30, 0x01	; 1
 c32:	66 0f       	add	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	bb 1f       	adc	r27, r27
 c3a:	62 17       	cp	r22, r18
 c3c:	73 07       	cpc	r23, r19
 c3e:	84 07       	cpc	r24, r20
 c40:	ba 07       	cpc	r27, r26
 c42:	20 f0       	brcs	.+8      	; 0xc4c <__divsf3_pse+0xae>
 c44:	62 1b       	sub	r22, r18
 c46:	73 0b       	sbc	r23, r19
 c48:	84 0b       	sbc	r24, r20
 c4a:	ba 0b       	sbc	r27, r26
 c4c:	ee 1f       	adc	r30, r30
 c4e:	88 f7       	brcc	.-30     	; 0xc32 <__divsf3_pse+0x94>
 c50:	e0 95       	com	r30
 c52:	08 95       	ret

00000c54 <__fixunssfsi>:
 c54:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_splitA>
 c58:	88 f0       	brcs	.+34     	; 0xc7c <__fixunssfsi+0x28>
 c5a:	9f 57       	subi	r25, 0x7F	; 127
 c5c:	98 f0       	brcs	.+38     	; 0xc84 <__fixunssfsi+0x30>
 c5e:	b9 2f       	mov	r27, r25
 c60:	99 27       	eor	r25, r25
 c62:	b7 51       	subi	r27, 0x17	; 23
 c64:	b0 f0       	brcs	.+44     	; 0xc92 <__fixunssfsi+0x3e>
 c66:	e1 f0       	breq	.+56     	; 0xca0 <__fixunssfsi+0x4c>
 c68:	66 0f       	add	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	1a f0       	brmi	.+6      	; 0xc78 <__fixunssfsi+0x24>
 c72:	ba 95       	dec	r27
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__fixunssfsi+0x14>
 c76:	14 c0       	rjmp	.+40     	; 0xca0 <__fixunssfsi+0x4c>
 c78:	b1 30       	cpi	r27, 0x01	; 1
 c7a:	91 f0       	breq	.+36     	; 0xca0 <__fixunssfsi+0x4c>
 c7c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__fp_zero>
 c80:	b1 e0       	ldi	r27, 0x01	; 1
 c82:	08 95       	ret
 c84:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_zero>
 c88:	67 2f       	mov	r22, r23
 c8a:	78 2f       	mov	r23, r24
 c8c:	88 27       	eor	r24, r24
 c8e:	b8 5f       	subi	r27, 0xF8	; 248
 c90:	39 f0       	breq	.+14     	; 0xca0 <__fixunssfsi+0x4c>
 c92:	b9 3f       	cpi	r27, 0xF9	; 249
 c94:	cc f3       	brlt	.-14     	; 0xc88 <__fixunssfsi+0x34>
 c96:	86 95       	lsr	r24
 c98:	77 95       	ror	r23
 c9a:	67 95       	ror	r22
 c9c:	b3 95       	inc	r27
 c9e:	d9 f7       	brne	.-10     	; 0xc96 <__fixunssfsi+0x42>
 ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__fixunssfsi+0x5c>
 ca2:	90 95       	com	r25
 ca4:	80 95       	com	r24
 ca6:	70 95       	com	r23
 ca8:	61 95       	neg	r22
 caa:	7f 4f       	sbci	r23, 0xFF	; 255
 cac:	8f 4f       	sbci	r24, 0xFF	; 255
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	08 95       	ret

00000cb2 <__floatunsisf>:
 cb2:	e8 94       	clt
 cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <__floatsisf+0x12>

00000cb6 <__floatsisf>:
 cb6:	97 fb       	bst	r25, 7
 cb8:	3e f4       	brtc	.+14     	; 0xcc8 <__floatsisf+0x12>
 cba:	90 95       	com	r25
 cbc:	80 95       	com	r24
 cbe:	70 95       	com	r23
 cc0:	61 95       	neg	r22
 cc2:	7f 4f       	sbci	r23, 0xFF	; 255
 cc4:	8f 4f       	sbci	r24, 0xFF	; 255
 cc6:	9f 4f       	sbci	r25, 0xFF	; 255
 cc8:	99 23       	and	r25, r25
 cca:	a9 f0       	breq	.+42     	; 0xcf6 <__floatsisf+0x40>
 ccc:	f9 2f       	mov	r31, r25
 cce:	96 e9       	ldi	r25, 0x96	; 150
 cd0:	bb 27       	eor	r27, r27
 cd2:	93 95       	inc	r25
 cd4:	f6 95       	lsr	r31
 cd6:	87 95       	ror	r24
 cd8:	77 95       	ror	r23
 cda:	67 95       	ror	r22
 cdc:	b7 95       	ror	r27
 cde:	f1 11       	cpse	r31, r1
 ce0:	f8 cf       	rjmp	.-16     	; 0xcd2 <__floatsisf+0x1c>
 ce2:	fa f4       	brpl	.+62     	; 0xd22 <__floatsisf+0x6c>
 ce4:	bb 0f       	add	r27, r27
 ce6:	11 f4       	brne	.+4      	; 0xcec <__floatsisf+0x36>
 ce8:	60 ff       	sbrs	r22, 0
 cea:	1b c0       	rjmp	.+54     	; 0xd22 <__floatsisf+0x6c>
 cec:	6f 5f       	subi	r22, 0xFF	; 255
 cee:	7f 4f       	sbci	r23, 0xFF	; 255
 cf0:	8f 4f       	sbci	r24, 0xFF	; 255
 cf2:	9f 4f       	sbci	r25, 0xFF	; 255
 cf4:	16 c0       	rjmp	.+44     	; 0xd22 <__floatsisf+0x6c>
 cf6:	88 23       	and	r24, r24
 cf8:	11 f0       	breq	.+4      	; 0xcfe <__floatsisf+0x48>
 cfa:	96 e9       	ldi	r25, 0x96	; 150
 cfc:	11 c0       	rjmp	.+34     	; 0xd20 <__floatsisf+0x6a>
 cfe:	77 23       	and	r23, r23
 d00:	21 f0       	breq	.+8      	; 0xd0a <__floatsisf+0x54>
 d02:	9e e8       	ldi	r25, 0x8E	; 142
 d04:	87 2f       	mov	r24, r23
 d06:	76 2f       	mov	r23, r22
 d08:	05 c0       	rjmp	.+10     	; 0xd14 <__floatsisf+0x5e>
 d0a:	66 23       	and	r22, r22
 d0c:	71 f0       	breq	.+28     	; 0xd2a <__floatsisf+0x74>
 d0e:	96 e8       	ldi	r25, 0x86	; 134
 d10:	86 2f       	mov	r24, r22
 d12:	70 e0       	ldi	r23, 0x00	; 0
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	2a f0       	brmi	.+10     	; 0xd22 <__floatsisf+0x6c>
 d18:	9a 95       	dec	r25
 d1a:	66 0f       	add	r22, r22
 d1c:	77 1f       	adc	r23, r23
 d1e:	88 1f       	adc	r24, r24
 d20:	da f7       	brpl	.-10     	; 0xd18 <__floatsisf+0x62>
 d22:	88 0f       	add	r24, r24
 d24:	96 95       	lsr	r25
 d26:	87 95       	ror	r24
 d28:	97 f9       	bld	r25, 7
 d2a:	08 95       	ret

00000d2c <__fp_inf>:
 d2c:	97 f9       	bld	r25, 7
 d2e:	9f 67       	ori	r25, 0x7F	; 127
 d30:	80 e8       	ldi	r24, 0x80	; 128
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	60 e0       	ldi	r22, 0x00	; 0
 d36:	08 95       	ret

00000d38 <__fp_nan>:
 d38:	9f ef       	ldi	r25, 0xFF	; 255
 d3a:	80 ec       	ldi	r24, 0xC0	; 192
 d3c:	08 95       	ret

00000d3e <__fp_pscA>:
 d3e:	00 24       	eor	r0, r0
 d40:	0a 94       	dec	r0
 d42:	16 16       	cp	r1, r22
 d44:	17 06       	cpc	r1, r23
 d46:	18 06       	cpc	r1, r24
 d48:	09 06       	cpc	r0, r25
 d4a:	08 95       	ret

00000d4c <__fp_pscB>:
 d4c:	00 24       	eor	r0, r0
 d4e:	0a 94       	dec	r0
 d50:	12 16       	cp	r1, r18
 d52:	13 06       	cpc	r1, r19
 d54:	14 06       	cpc	r1, r20
 d56:	05 06       	cpc	r0, r21
 d58:	08 95       	ret

00000d5a <__fp_round>:
 d5a:	09 2e       	mov	r0, r25
 d5c:	03 94       	inc	r0
 d5e:	00 0c       	add	r0, r0
 d60:	11 f4       	brne	.+4      	; 0xd66 <__fp_round+0xc>
 d62:	88 23       	and	r24, r24
 d64:	52 f0       	brmi	.+20     	; 0xd7a <__fp_round+0x20>
 d66:	bb 0f       	add	r27, r27
 d68:	40 f4       	brcc	.+16     	; 0xd7a <__fp_round+0x20>
 d6a:	bf 2b       	or	r27, r31
 d6c:	11 f4       	brne	.+4      	; 0xd72 <__fp_round+0x18>
 d6e:	60 ff       	sbrs	r22, 0
 d70:	04 c0       	rjmp	.+8      	; 0xd7a <__fp_round+0x20>
 d72:	6f 5f       	subi	r22, 0xFF	; 255
 d74:	7f 4f       	sbci	r23, 0xFF	; 255
 d76:	8f 4f       	sbci	r24, 0xFF	; 255
 d78:	9f 4f       	sbci	r25, 0xFF	; 255
 d7a:	08 95       	ret

00000d7c <__fp_split3>:
 d7c:	57 fd       	sbrc	r21, 7
 d7e:	90 58       	subi	r25, 0x80	; 128
 d80:	44 0f       	add	r20, r20
 d82:	55 1f       	adc	r21, r21
 d84:	59 f0       	breq	.+22     	; 0xd9c <__fp_splitA+0x10>
 d86:	5f 3f       	cpi	r21, 0xFF	; 255
 d88:	71 f0       	breq	.+28     	; 0xda6 <__fp_splitA+0x1a>
 d8a:	47 95       	ror	r20

00000d8c <__fp_splitA>:
 d8c:	88 0f       	add	r24, r24
 d8e:	97 fb       	bst	r25, 7
 d90:	99 1f       	adc	r25, r25
 d92:	61 f0       	breq	.+24     	; 0xdac <__fp_splitA+0x20>
 d94:	9f 3f       	cpi	r25, 0xFF	; 255
 d96:	79 f0       	breq	.+30     	; 0xdb6 <__fp_splitA+0x2a>
 d98:	87 95       	ror	r24
 d9a:	08 95       	ret
 d9c:	12 16       	cp	r1, r18
 d9e:	13 06       	cpc	r1, r19
 da0:	14 06       	cpc	r1, r20
 da2:	55 1f       	adc	r21, r21
 da4:	f2 cf       	rjmp	.-28     	; 0xd8a <__fp_split3+0xe>
 da6:	46 95       	lsr	r20
 da8:	f1 df       	rcall	.-30     	; 0xd8c <__fp_splitA>
 daa:	08 c0       	rjmp	.+16     	; 0xdbc <__fp_splitA+0x30>
 dac:	16 16       	cp	r1, r22
 dae:	17 06       	cpc	r1, r23
 db0:	18 06       	cpc	r1, r24
 db2:	99 1f       	adc	r25, r25
 db4:	f1 cf       	rjmp	.-30     	; 0xd98 <__fp_splitA+0xc>
 db6:	86 95       	lsr	r24
 db8:	71 05       	cpc	r23, r1
 dba:	61 05       	cpc	r22, r1
 dbc:	08 94       	sec
 dbe:	08 95       	ret

00000dc0 <__fp_zero>:
 dc0:	e8 94       	clt

00000dc2 <__fp_szero>:
 dc2:	bb 27       	eor	r27, r27
 dc4:	66 27       	eor	r22, r22
 dc6:	77 27       	eor	r23, r23
 dc8:	cb 01       	movw	r24, r22
 dca:	97 f9       	bld	r25, 7
 dcc:	08 95       	ret

00000dce <__mulsf3>:
 dce:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3x>
 dd2:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_round>
 dd6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_pscA>
 dda:	38 f0       	brcs	.+14     	; 0xdea <__mulsf3+0x1c>
 ddc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_pscB>
 de0:	20 f0       	brcs	.+8      	; 0xdea <__mulsf3+0x1c>
 de2:	95 23       	and	r25, r21
 de4:	11 f0       	breq	.+4      	; 0xdea <__mulsf3+0x1c>
 de6:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
 dea:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_nan>
 dee:	11 24       	eor	r1, r1
 df0:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_szero>

00000df4 <__mulsf3x>:
 df4:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_split3>
 df8:	70 f3       	brcs	.-36     	; 0xdd6 <__mulsf3+0x8>

00000dfa <__mulsf3_pse>:
 dfa:	95 9f       	mul	r25, r21
 dfc:	c1 f3       	breq	.-16     	; 0xdee <__mulsf3+0x20>
 dfe:	95 0f       	add	r25, r21
 e00:	50 e0       	ldi	r21, 0x00	; 0
 e02:	55 1f       	adc	r21, r21
 e04:	62 9f       	mul	r22, r18
 e06:	f0 01       	movw	r30, r0
 e08:	72 9f       	mul	r23, r18
 e0a:	bb 27       	eor	r27, r27
 e0c:	f0 0d       	add	r31, r0
 e0e:	b1 1d       	adc	r27, r1
 e10:	63 9f       	mul	r22, r19
 e12:	aa 27       	eor	r26, r26
 e14:	f0 0d       	add	r31, r0
 e16:	b1 1d       	adc	r27, r1
 e18:	aa 1f       	adc	r26, r26
 e1a:	64 9f       	mul	r22, r20
 e1c:	66 27       	eor	r22, r22
 e1e:	b0 0d       	add	r27, r0
 e20:	a1 1d       	adc	r26, r1
 e22:	66 1f       	adc	r22, r22
 e24:	82 9f       	mul	r24, r18
 e26:	22 27       	eor	r18, r18
 e28:	b0 0d       	add	r27, r0
 e2a:	a1 1d       	adc	r26, r1
 e2c:	62 1f       	adc	r22, r18
 e2e:	73 9f       	mul	r23, r19
 e30:	b0 0d       	add	r27, r0
 e32:	a1 1d       	adc	r26, r1
 e34:	62 1f       	adc	r22, r18
 e36:	83 9f       	mul	r24, r19
 e38:	a0 0d       	add	r26, r0
 e3a:	61 1d       	adc	r22, r1
 e3c:	22 1f       	adc	r18, r18
 e3e:	74 9f       	mul	r23, r20
 e40:	33 27       	eor	r19, r19
 e42:	a0 0d       	add	r26, r0
 e44:	61 1d       	adc	r22, r1
 e46:	23 1f       	adc	r18, r19
 e48:	84 9f       	mul	r24, r20
 e4a:	60 0d       	add	r22, r0
 e4c:	21 1d       	adc	r18, r1
 e4e:	82 2f       	mov	r24, r18
 e50:	76 2f       	mov	r23, r22
 e52:	6a 2f       	mov	r22, r26
 e54:	11 24       	eor	r1, r1
 e56:	9f 57       	subi	r25, 0x7F	; 127
 e58:	50 40       	sbci	r21, 0x00	; 0
 e5a:	9a f0       	brmi	.+38     	; 0xe82 <__mulsf3_pse+0x88>
 e5c:	f1 f0       	breq	.+60     	; 0xe9a <__mulsf3_pse+0xa0>
 e5e:	88 23       	and	r24, r24
 e60:	4a f0       	brmi	.+18     	; 0xe74 <__mulsf3_pse+0x7a>
 e62:	ee 0f       	add	r30, r30
 e64:	ff 1f       	adc	r31, r31
 e66:	bb 1f       	adc	r27, r27
 e68:	66 1f       	adc	r22, r22
 e6a:	77 1f       	adc	r23, r23
 e6c:	88 1f       	adc	r24, r24
 e6e:	91 50       	subi	r25, 0x01	; 1
 e70:	50 40       	sbci	r21, 0x00	; 0
 e72:	a9 f7       	brne	.-22     	; 0xe5e <__mulsf3_pse+0x64>
 e74:	9e 3f       	cpi	r25, 0xFE	; 254
 e76:	51 05       	cpc	r21, r1
 e78:	80 f0       	brcs	.+32     	; 0xe9a <__mulsf3_pse+0xa0>
 e7a:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
 e7e:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_szero>
 e82:	5f 3f       	cpi	r21, 0xFF	; 255
 e84:	e4 f3       	brlt	.-8      	; 0xe7e <__mulsf3_pse+0x84>
 e86:	98 3e       	cpi	r25, 0xE8	; 232
 e88:	d4 f3       	brlt	.-12     	; 0xe7e <__mulsf3_pse+0x84>
 e8a:	86 95       	lsr	r24
 e8c:	77 95       	ror	r23
 e8e:	67 95       	ror	r22
 e90:	b7 95       	ror	r27
 e92:	f7 95       	ror	r31
 e94:	e7 95       	ror	r30
 e96:	9f 5f       	subi	r25, 0xFF	; 255
 e98:	c1 f7       	brne	.-16     	; 0xe8a <__mulsf3_pse+0x90>
 e9a:	fe 2b       	or	r31, r30
 e9c:	88 0f       	add	r24, r24
 e9e:	91 1d       	adc	r25, r1
 ea0:	96 95       	lsr	r25
 ea2:	87 95       	ror	r24
 ea4:	97 f9       	bld	r25, 7
 ea6:	08 95       	ret

00000ea8 <__umulhisi3>:
 ea8:	a2 9f       	mul	r26, r18
 eaa:	b0 01       	movw	r22, r0
 eac:	b3 9f       	mul	r27, r19
 eae:	c0 01       	movw	r24, r0
 eb0:	a3 9f       	mul	r26, r19
 eb2:	70 0d       	add	r23, r0
 eb4:	81 1d       	adc	r24, r1
 eb6:	11 24       	eor	r1, r1
 eb8:	91 1d       	adc	r25, r1
 eba:	b2 9f       	mul	r27, r18
 ebc:	70 0d       	add	r23, r0
 ebe:	81 1d       	adc	r24, r1
 ec0:	11 24       	eor	r1, r1
 ec2:	91 1d       	adc	r25, r1
 ec4:	08 95       	ret

00000ec6 <_exit>:
 ec6:	f8 94       	cli

00000ec8 <__stop_program>:
 ec8:	ff cf       	rjmp	.-2      	; 0xec8 <__stop_program>
